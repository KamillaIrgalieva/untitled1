package com.company;
/*Задача 2. Книжная полка
У вас есть книжная полка, у каждой книги есть размер - количество страниц. Книжная полка представлена массивом, в котором хранятся размеры книг в порядке возрастания. Вам надо написать функцию, которая принимала бы этот массив размеров текущих книг, размер новой книги и вычисляла бы количество больших по размеру книг уже на полке. Требуемая алгоритмическая сложность: время O(log2n), дополнительная память O(1).

Подумайте, как вы решили бы эту задачу, как достигли бы требуемой асимптотики.

Решение
Реализуйте алгоритм бинарного поиска. С его помощью вы найдёте место в массиве, где слева от него будут элементы меньше или равны, а справа строго больше. Работает бинарный поиск как раз за время O(log2n), дополнительную память O(1).

Обратите внимание на случай когда у нас на полке есть несколько книг с тем же размером, что и у новой книги. Именно поэтому мы не останавливаем бинарный поиск когда найдём какой-то из таких размеров в массиве, ведь для ответа нам важно чтобы справа от найденной позиции были книги только строго большие по размеру. Продолжать поиск нужно именно бинарным поиском, нельзя просто взять и пройтись вправо по равным элементам до тех пор пока не встретим больший, ведь тогда асимптотика упадёт с O(log2n) до O(n).

Процесс реализации
В начале работы программы заведите массив со значениями: [14, 16, 19, 32, 32, 32, 56, 69, 72].
Напишите функцию, которая бы принимала массив, размер новой книги и возвращала бы количество больших по размеру книг по рассмотренному выше алгоритму. Внимание! Вызывать готовые реализации бинарного поиска запрещено.
Вызовите эту функцию, передав туда массив и размер новой книги - 32. Выведите результат на экран. Убедитесь, что ответ верный: 3 (т.к. только три книги на полке строго больше чем 32 страницы).
Вызовите эту функцию, передав туда массив и размер новой книги - 60. Выведите результат на экран. Убедитесь, что ответ верный: 2 (т.к. только две книги на полке строго больше чем 60 страницы).
Загрузите ваше решение на сайт repl.it, отправьте ссылку на него на проверку.

 */

public class Main {
    public static void main(String[] args) {
        int[] arr = new int[]{14, 16, 19, 32, 32, 32, 56, 69, 72}; // входные данные - массив

        int count = 0;
        int element = index(arr,60); // результат вычисления метода index

        for (int i = element + 1; i < arr.length; i ++){ // ищем количество одинаковых по значению ячеек
            if (arr[element] == arr[i]){
               count++;
            }
        }

        int numberOfbigBook = (arr.length - 1) - element - count; // вычисляем количество книг больших по объему
        System.out.println("Количество больших по объему книг: " + numberOfbigBook + " шт.");
    }

    /* метод, который вычисляет индекс ячейки в котором либо находится книга,
    либо место между книгами, где она должна стоять*/
    public static int index(int[] arr, int elementToFind) {
        System.out.println("Размер новой книги: - " + elementToFind + " стр.");
        int startIndex = 0;
        int endIndex = arr.length - 1;
        int middleIndex;

        while (startIndex <= endIndex) {
            middleIndex = startIndex + (endIndex - startIndex) / 2; // нашли индекс середины

            if (arr[middleIndex] < elementToFind && elementToFind < arr[middleIndex + 1]){
                return middleIndex;
            } else {
                if (arr[middleIndex] == elementToFind){
                    return middleIndex;
                }
              }
            if (arr[middleIndex] > elementToFind) {
                endIndex = middleIndex - 1;// сдвигаем вправо
            } else {
                startIndex = middleIndex + 1;// сдвигаем влево
            }
        } return -1;
    }
}


